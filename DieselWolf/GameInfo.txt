Due Friday Apr 3 at midnight (4 weeks).

********  TWO PLAYER GAMES - "GasTank Chess" ********

For this year's two-player game assignment, we are going to implement a brand
new board game created just for you.  The game is a sort of simplified version
of the famous boardgame "chess", with one major twist.  In our version, each
piece is a bit like a car, that needs gas to run.  With each move that a piece
makes, it uses up some of its gas.  If it ever runs out of gas, it can no longer
move.  However, pieces can replenish their amount of gas by capturing other
pieces.  That means that our computer programs will need to keep track of
(and display) not only where the pieces are on the board, but also how much
"gas" each piece currently has.

[I thought about calling this game "Countdown", but I decided that "GasTank"
sounds more fun]

Another important variation in our game, is that pieces are allowed to capture
not only the opponent's pieces, but are also allowed to capture their own pieces.

You will each write a program that can play "GasTank Chess" against a human
opponent. The game and the program requirements are detailed below.


THE GAME

"GasTank Chess" is a chess-like game in which each player takes turns moving
one of his/her pieces, and tries to capture the opponent's King.  It is played
on an 8x7 board, and each side starts with a set of pieces consisting of
1 king, 1 queen, 2 bishops, and 2 knights.  The different pieces have rules
about how they can move, which is described later.

Players alternate moves, moving one of their own pieces each turn.
When it is your turn, you MUST make a move -- you cannot pass.
If it is your turn and you have no legal moves, you lose.

A player wins either when he/she captures the opponents' king,
or if it is his opponent's turn but has no legal moves.

The initial position is:

        - - B Q K B - -
        - - - N - N - -
        - - - - - - - -
        - - - - - - - -
        - - - - - - - -
        - - - n - n - -
        - - b q k b - -

   N,B,Q,K are the computer's knight, bishop, queen, and king
      (moving DOWN the board).

   n,b,q,k are the human's knight, bishop, queen, and king
      (moving UP the board).

Initially, every piece has a full tank of gas, equalling 3 moves.
Each time a piece moves, its tank is reduced by 1.  If its tank reaches
zero, it can no longer move.  But, when a piece captures another piece,
its tank is "refilled" -- that is, it is brought back up to full (3).

The pieces move as follows:

KNIGHT
-- moves the same as the "knight" in regular (western) chess. That is, vertically
    1 or 2 squares, then horizontally 2 or 1 squares, respectively.  For example,
    a knight may move forward 1 square, then turn right and move 2 squares.
-- may move either onto an empty square, or onto a square occupied by another
    piece (thus capturing it).
-- knights can "jump over" other pieces.  That is, although the destination
    square needs to be available, the intervening squares can be occupied.

BISHOP
-- moves the same as the "bishop" in regular chess.
    That is, diagonally in one direction any number of squares desired.
-- may move either onto an empty square, or onto a square occupied by another
    piece (thus capturing it).
-- a bishop CANNOT jump over other pieces.  Once it bumps into a piece
    or captures a piece, that is as far as it can go.

QUEEN
-- moves like a knight or a bishop.
-- may move either onto an empty square, or onto a square occupied by another
    piece (thus capturing it).
-- when moving like a bishop, CANNOT jump over other pieces (same as a bishop).
   When moving like a knight, MAY jump over other pieces (same as a knight).

KING
-- moves the same as the "king" in regular chess.
    That is, to any of the eight neighboring squares up, down, left, right,
    or diagonal, one square away from where it sits.
-- may move either onto an empty square, or onto a square occupied by another
    piece (thus capturing it).
-- if it's captured, you lose!


OTHER DETAILS - 
-- moving is compulsory.  That is, a player cannot "pass".
-- you are never allowed to capture your own king.  That is an illegal move.
-- however, it is not illegal to move your king into danger.  If the opponent
     doesn't see that he/she can capture your king, you play on!
-- unlike chess, there is no such thing as "check" or "checkmate".
     Winning is by actually capturing the king (or the opponent having no move).
-- note that it isn't illegal for a king to be left "in check", nor is it illegal
    to "move into check".  In fact, if it is your only move, you should do it
    (victory doesn't happen until the king is actually captured, and your
    opponent just might miss it!).
-- notice that our queens move differently than the queens in chess.
-- unlike chess, there are no pawns or rooks.
-- unlike chess, inability to move isn't a stalemate draw - it is a LOSS.
-- unlike checkers, capturing isn't compulsary.
-- unlike Go (Weiqi), players don't place pieces on the board.
    The pieces are on the board at the beginning, and are moved or captured.
-- capturing replenishes a piece's gas to 3 regardless of the amount of gas in
    the piece being captured.  Your gastank is refilled regardless of what kind
    of piece captured, even if that piece's tank is empty.


THE PROGRAM

Your program is one player, and will attempt to defeat the human operator.
It must fulfill the following requirements:

1. It first asks the human whether he/she wants to move first or second.

2. The current position is displayed on the screen before and after each
   move, with the axes labeled as in the following example:

      7  -- -- -- Q3 K3 B3 -- --  computer
      6  -- -- -- B2 -- N3 -- -- 
      5  -- N2 -- -- -- -- -- --
      4  -- -- -- -- -- -- -- --
      3  b2 -- -- -- -- -- -- --
      2  -- -- -- n3 -- n3 -- --
      1  -- -- -- q3 k3 b3 -- --  human
         -----------------------
         A  B  C  D  E  F  G  H

   Note the digit alongside each piece - that represents the number of moves
   that each piece still has (henceforth we will refer to these numbers
   as "gastank values").

   You are encouraged to make minor modifications to the display if you think
   it is easier to see (or more fun) with different characters for the pieces.
   If you want to make a graphical user interface, that's even better (although
   you won't get extra credit for it).  But whatever you do, the axes MUST be
   labeled, with row numbers and column letters, EXACTLY in the above manner. 

   (If, like me, you use simple "ascii" output to System.out, as shown above, you
    will probably find it a LOT easier to see the position if you use different
    colors for the human's pieces versus the computer's pieces.  This is actually
    very easy to do in Java with ansi escape sequences, and your instructor will
    post the relevant code.  You are encouraged to add it to your program's display.)

3. The human enters moves using the notation above, for the FROM square
   followed by the TO square.  For instance, in the position above, the
   human could use the bishop on A3 to capture the computer's bishop on D6
   and the move would be entered as follows: A3D6 (no spaces).  In that case,
   bishop would then have a gastank value of 3.  Of course, capturing is not
   compulsary, so there are many other possible legal moves, such as D1C2,
   D1E3, A3B2, F1G2, etc.

4. When your program makes a move, it must print out the move using the same
   notation described in #3 above, AND display the new position (with any
   appropriate changes to gastank values).

5. The program must detect when the game has ended, i.e. when a king has
   has been captured, or if a player has no legal moves and has thus lost.
   It should correctly announce when it has won, and should also correctly
   announce when the human has won.
  
6. The program must never play an illegal move.

7. The program should detect when an illegal move has been entered
   and require the human to re-enter a valid move.

8. At each turn, the program must make its move in 5 seconds or less.

9. The program should be sufficiently bug-free to play through an entire
   game without ever crashing.  Memory-leaks can cause these kinds
   of programs to fail late in the game, so test your program on several
   complete games, to be sure it is reliable through a whole game.

10. Your program must run on a CAMPUS workstation.  For the tournament,
   you must run on a campus workstation, not your own.  If you have
   unique requirements, please make arrangements with me beforehand.


STRATEGY AND OTHER REQUIREMENTS

1. To get FULL credit, your program must satisfy the requirements listed
   above, and also MUST use minimax search, at least 4 plies deep, with
   alpha-beta pruning (correctly), to determine the computer's moves.
   Refrain from trying to find a simple closed-form solution to the game,
   as that would defeat the purpose of the assignment.

2. You can use any programming language you want.  Any compiled
   language that generates efficient code, such as C, C++, or even
   Pascal or Fortran, are good choices.  You can also use Java, C#,
   Python, Ruby, Perl, BASIC, Smalltalk, Scheme, LISP, Clojure, or
   other interpreted languages, but don't be surprised if your code
   searches 1 or 2 plies less than those written in C or C++.
   If you want to use a language other than one of the ones mentioned
   here, please see me first.

3. You can decide whether you want to do a deep selective search, or a
   more shallow but exhaustive (full-width) search.  Most programs like
   this perform better with exhaustive search, because a selective search
   would require an excellent heuristic to choose which moves to discard
   -- otherwise it would risk failing to consider important possibilities.


TOURNAMENT

After the due date, we will have a "fun" tournament, in which your programs
will play against each other.  This will give us a chance to compare the
various strategies we used.  The tournament will be much more fun if you come
up with a name for your program.  In fact, that is a requirement!
Your instructor has already finished his program, and has named it "BUGGY",
in reference to both cars and code.  BUGGY is pretty strong, but beatable.

Submit your solution (the code) to your instructor using SacCT.  The code
should be included in a ZIP file, along with a 2-3 page text file describing
the following:

      a. your program's NAME
      b. instructions on how to install, run, and play against your program
      c. what language it is written in
      d. which techniques you used (alpha-beta, iterative deepening, history tables, etc.)
      e. how deep it typically searches (how many plies), from the opening position,
          and then later in the game
      f. a brief explanation of the factors your program considers in its
          terminal evaluation function
      g. how strong you think it is -
          - be specific (can it beat you?  has it played any of the other programs?)
      h. anything unusual or unique about your program
      i. any bugs you are aware of that cause it to crash or make illegal moves?
      j. any bugs you are aware of that cause it to sometimes make bad moves?

As the date of the tournament gets closer, your instructor will provide
another handout with some very minor additional requirements that will help
make the tournament run smoothly.

-----

  