void computeMinimax();
int min(int depth, int &maxFoundSoFar);
int max(int depth, int &minFoundSoFar);
int evaluateMax(int moves[100][4], int &moveCount, int depth);
int evaluateMin(int moves[100][4], int &moveCount, int depth);
void getPlayerMove();
void setup();
void printboard();
void makeMove(int move[4], int pieceTaken[3]);
void retractMove(int move[4], int pieceTaken[3]);
int getPossibleMovesMin(int re[100][4]);
int getPossibleMovesMax(int re[100][4]);
bool moveInBounds(int to_col, int to_row);
void moveKnight(int re[100][4], int &count, int i, int j, int kingVal);
void moveKing(int re[100][4], int &count, int i, int j);
void moveBishop(int re[100][4], int &count, int i, int j, int kingVal);
bool foundWholeMove(int re[100][4], int count, int to_row, int to_col, int from_row, int from_col);
bool isMovePossibleMin(int re[100][4], int count, int from_row, int from_col, int to_row, int to_col);
void gameOver(bool maxPlayerOne);
bool isPlayerGoingFirst();
void sortMoves(int moves[100][4], int &moveCount, int depth);